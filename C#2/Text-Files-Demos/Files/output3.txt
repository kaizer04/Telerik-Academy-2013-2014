Line 1: TOPIC
Line 2:     about_Arithmetic_Operators
Line 3: 
Line 4: SHORT DESCRIPTION
Line 5:     Describes the operators that perform arithmetic in Windows PowerShell.
Line 6: 
Line 7: LONG DESCRIPTION
Line 8: 
Line 9:     Arithmetic operators calculate numeric values. You can use one or
Line 10:     more arithmetic operators to add, subtract, multiply, and divide
Line 11:     values, and to calculate the remainder (modulus) of a division operation.
Line 12: 
Line 13:     In addition, the addition operator (+) and multiplication operator (*)
Line 14:     also operate on strings, arrays, and hash tables. The addition operator
Line 15:     concatenates the input. The multiplication operator returns multiple copies
Line 16:     of the input. You can even mix object types in an arithmetic statement.
Line 17:     The method that is used to evaluate the statement is determined by the type
Line 18:     of the leftmost object in the expression.
Line 19: 
Line 20:     Windows PowerShell supports the following arithmetic operators:
Line 21: 
Line 22: 
Line 23:     Operator  Description                             Example
Line 24:     --------  -----------                             -------
Line 25:     +         Adds integers; concatenates strings,    6+2
Line 26:               arrays, and hash tables.                "file" + "name"
Line 27: 
Line 28:     -         Subtracts one value from another        6-2
Line 29:               value.                                  (get-date).date - 1
Line 30: 
Line 31:     -         Makes a number a negative number.       -6+2
Line 32:                                                       -4
Line 33:  
Line 34:     *         Multiplies integers; copies strings     6*2
Line 35:               and arrays the specified number of      "w" * 3
Line 36:               times.
Line 37: 
Line 38:     /         Divides two values.                     6/2
Line 39: 
Line 40:     
Line 41:     %         Returns the remainder of a division     7%2
Line 42:               operation.
Line 43:  
Line 44:  
Line 45: 
Line 46:     OPERATOR PRECEDENCE
Line 47:     Windows PowerShell processes arithmetic operators in the following order:
Line 48: 
Line 49:         Parentheses ()
Line 50:         - (for a negative number)
Line 51:         *, /, %
Line 52:         +, - (for subtraction)
Line 53: 
Line 54: 
Line 55:     Windows PowerShell processes the expressions from left to right according
Line 56:     to the precedence rules. The following examples show the effect of the
Line 57:     precedence rules: 
Line 58: 
Line 59:         C:\PS> 3+6/3*4 
Line 60:         11
Line 61: 
Line 62:         C:\PS> 10+4/2
Line 63:         12
Line 64: 
Line 65:         C:\PS> (10+4)/2
Line 66:         7
Line 67: 
Line 68:         C:\PS> (3+3)/ (1+1)
Line 69:         3
Line 70:  
Line 71:     The order in which Windows PowerShell evaluates expressions might differ 
Line 72:     from other programming and scripting languages that you have used. The 
Line 73:     following example shows a complicated assignment statement.
Line 74: 
Line 75:         C:\PS> $a = 0
Line 76:         C:\PS> $b = 1,2
Line 77:         C:\PS> $c = -1,-2
Line 78:         
Line 79:         C:\PS> $b[$a] = $c[$a++]
Line 80:         
Line 81:         C:\PS> $b
Line 82:         1
Line 83:         -1
Line 84: 
Line 85:     In this example, the expression $a++ is evaluated before $c[$a++]. 
Line 86:     Evaluating $a++ changes the value of $a. The variable $a in $b[$a] 
Line 87:     equals 1, not 0, so the statement assigns a value to $b[1], not $b[0].
Line 88: 
Line 89: 
Line 90: 
Line 91:     ADDING AND MULTIPLYING NON-NUMERIC TYPES
Line 92:     You can add numbers, strings, arrays, and hash tables. And, you can
Line 93:     multiply numbers, strings, and arrays. However, you cannot multiply hash
Line 94:     tables.
Line 95: 
Line 96:     When you add strings, arrays, or hash tables, the elements are 
Line 97:     concatenated. When you concatenate collections, such as arrays or hash
Line 98:     tables, a new object is created that contains the objects from both
Line 99:     collections. If you try to concatenate hash tables that have the same key,
Line 100:     the operation fails.
Line 101: 
Line 102:     For example, the following commands create two arrays and then add them:
Line 103: 
Line 104: 
Line 105: 	C:\PS> $a = 1,2,3
Line 106: 	C:\PS> $b = "A","B,"C"
Line 107: 	C:\PS> $a + $b
Line 108: 	1
Line 109: 	2
Line 110: 	3
Line 111: 	A
Line 112: 	B
Line 113: 	C
Line 114:  
Line 115: 
Line 116:     You can also perform arithmetic operations on objects of different types. 
Line 117:     The operation that Windows PowerShell performs is determined by the
Line 118:     Microsoft .NET Framework type of the leftmost object in the operation.
Line 119:     Windows PowerShell tries to convert all the objects in the operation to the
Line 120:     .NET Framework type of the first 
Line 121:     object. If it succeeds in converting the objects, it performs the operation
Line 122:     appropriate to the .NET Framework type of the first object. If it fails to 
Line 123:     convert any of the objects, the operation fails. 
Line 124: 
Line 125:     The following example demonstrates the use of the addition and 
Line 126:     multiplication operators in operations that include different object types:
Line 127: 
Line 128: 
Line 129:         C:\PS> "file" + 16
Line 130:         file16
Line 131: 
Line 132:         C:\PS> $array = 1,2,3
Line 133:         C:\PS> $array + 16
Line 134:         1
Line 135:         2
Line 136:         3
Line 137:         16
Line 138: 
Line 139: 	C:\PS> $array + "file"
Line 140:         1
Line 141:         2
Line 142:         3
Line 143:         file
Line 144: 
Line 145:         C:\PS> "file" * 3
Line 146:         filefilefile
Line 147:  
Line 148:     Because the method that is used to evaluate statements is determined by the
Line 149:     leftmost object, addition and multiplication in Windows PowerShell are not
Line 150:     strictly commutative. For example, (a + b) does not always equal (b + a), 
Line 151:     and (a * b) does not always equal (b * a).
Line 152: 
Line 153:     The following examples demonstrate this principle:
Line 154: 
Line 155:         C:\PS> "file" + 2
Line 156:         file2
Line 157: 
Line 158:         C:\PS> 2 + "file"
Line 159:         Cannot convert value "file" to type "System.Int32". Error: "Input
Line 160:         string was not in a correct format."
Line 161:         At line:1 char:4
Line 162:         + 2 + <<<<  "file"
Line 163: 
Line 164:         C:\PS> "file" * 3
Line 165:         filefilefile
Line 166: 
Line 167:         C:\PS> 3 * "file"
Line 168:         Cannot convert value "file" to type "System.Int32". Error: "Input 
Line 169:         string was not in a correct format."
Line 170:         At line:1 char:4
Line 171:         + 3 * <<<<  "file"
Line 172:  
Line 173: 
Line 174:     Hash tables are a slightly different case. You can add hash tables. And,
Line 175:     you can add a hash table to an array. However, you cannot add any other 
Line 176:     type to a hash table. 
Line 177: 
Line 178:     The following examples show how to add hash tables to each other and to 
Line 179:     other objects:
Line 180: 
Line 181: 
Line 182:         C:\PS> $hash1 = @{a=1; b=2; c=3}
Line 183:         C:\PS> $hash2 = @{c1="Server01"; c2="Server02"}
Line 184:         C:\PS> $hash1 + $hash2
Line 185: 
Line 186:         Name                           Value
Line 187:         ----                           -----
Line 188:         c2                             Server02
Line 189:         a                              1
Line 190:         b                              2
Line 191:         c1                             Server01
Line 192:         c                              3
Line 193: 
Line 194: 
Line 195:         C:\PS> $hash1 + 2
Line 196:         You can add another hash table only to a hash table.
Line 197:         At line:1 char:9
Line 198:         + $hash1 + <<<<  2
Line 199: 
Line 200: 
Line 201:         C:\PS> 2 + $hash1
Line 202:         Cannot convert "System.Collections.Hashtable" to "System.Int32".
Line 203:         At line:1 char:4
Line 204:         + 2 + <<<<  $hash1
Line 205:  
Line 206: 
Line 207:     The following examples demonstrate that you can add a hash table to an 
Line 208:     array. The entire hash table is added to the array as a single object.
Line 209: 
Line 210: 
Line 211:         C:\PS> $array = 1,2,3
Line 212:         C:\PS> $array + $hash1
Line 213:         1
Line 214:         2
Line 215:         3
Line 216: 
Line 217:         Name                           Value
Line 218:         ----                           -----
Line 219:         a                              1
Line 220:         b                              2
Line 221:         c                              3
Line 222: 
Line 223: 
Line 224:         C:\PS> $sum = $array + $hash1
Line 225:         C:\PS> $sum.count
Line 226:         4
Line 227: 
Line 228:         C:\PS> $sum[3]
Line 229:         Name                           Value
Line 230:         ----                           -----
Line 231:         a                              1
Line 232:         b                              2
Line 233:         c                              3
Line 234: 
Line 235: 
Line 236:         PS C:\ps-test> $sum + $hash2
Line 237:         1
Line 238:         2
Line 239:         3
Line 240: 
Line 241:         Name                           Value
Line 242:         ----                           -----
Line 243:         a                              1
Line 244:         b                              2
Line 245:         c                              3
Line 246:         c2                             Server02
Line 247:  
Line 248: 
Line 249:     The following example shows that you cannot add hash tables that contain 
Line 250:     the same key:
Line 251: 
Line 252:         C:\PS> $hash1 = @{a=1; b=2; c=3}
Line 253:         C:\PS> $hash2 = @{c="red"}
Line 254:         C:\PS> $hash1 + $hash2
Line 255:         Bad argument to operator '+': Item has already been added. 
Line 256:         Key in dictionary: 'c'    Key being added: 'c'.
Line 257:         At line:1 char:9
Line 258:         + $hash1 + <<<<  $hash2
Line 259:  
Line 260: 
Line 261: 
Line 262:     Although the addition operators are very useful, use the assignment 
Line 263:     operators to add elements to hash tables and arrays. For more information
Line 264:     see about_assignment_operators. The following examples use the += 
Line 265:     assignment operator to add items to an array:
Line 266: 
Line 267:         C:\PS>  $array
Line 268:         1
Line 269:         2
Line 270:         3
Line 271: 
Line 272:         C:\PS>  $array + "file"
Line 273:         1
Line 274:         2
Line 275:         3
Line 276:         file
Line 277: 
Line 278:         C:\PS>  $array
Line 279:         1
Line 280:         2
Line 281:         3
Line 282: 
Line 283:         C:\PS>  $array += "file"
Line 284:         C:\PS>  $array
Line 285:         1
Line 286:         2
Line 287:         3
Line 288:         file
Line 289: 
Line 290:         C:\PS> $hash1
Line 291: 
Line 292:         Name                           Value
Line 293:         ----                           -----
Line 294:         a                              1
Line 295:         b                              2
Line 296:         c                              3
Line 297: 
Line 298:         C:\PS> $hash1 += @{e = 5}
Line 299:         C:\PS> $hash1
Line 300: 
Line 301:         Name                           Value
Line 302:         ----                           -----
Line 303:         a                              1
Line 304:         b                              2
Line 305:         e                              5
Line 306:         c                              3
Line 307:  
Line 308: 
Line 309:     Windows PowerShell automatically selects the .NET Framework numeric type
Line 310:     that best expresses the result without losing  precision. For example:
Line 311: 
Line 312:         C:\PS> 2 + 3.1
Line 313:         5.1
Line 314:         C:\PS> (2). GetType().FullName
Line 315:         System.Int32
Line 316:         C:\PS> (2 + 3.1).GetType().FullName
Line 317:         System.Double
Line 318: 
Line 319:     If the result of an operation is too large for the type, the type of the 
Line 320:     result is widened to accommodate the result, as in the following example: 
Line 321: 
Line 322:         C:\PS> (512MB).GetType().FullName
Line 323:         System.Int32
Line 324:         C:\PS> (512MB * 512MB).GetType().FullName
Line 325:         System.Double
Line 326: 
Line 327:     The type of the result will not necessarily be the same as one of the 
Line 328:     operands. In the following example, the negative value cannot be cast to an
Line 329:     unsigned integer, and the unsigned integer is too large to be cast to
Line 330:     Int32:
Line 331: 
Line 332:         C:\PS> ([int32]::minvalue + [uint32]::maxvalue).gettype().fullname
Line 333:         System.Int64
Line 334: 
Line 335:     In this example, Int64 can accommodate both types.
Line 336: 
Line 337:     The System.Decimal type is an exception. If either operand has the Decimal
Line 338:     type, the result will be of the Decimal type. If the result is too large
Line 339:     for the Decimal type, it will not be cast to Double. Instead, an error
Line 340:     results.
Line 341:     
Line 342:         C:\PS> [Decimal]::maxvalue
Line 343:         79228162514264337593543950335
Line 344:         C:\PS> [Decimal]::maxvalue + 1
Line 345:         Value was either too large or too small for a Decimal.
Line 346:         At line:1 char:22
Line 347:         + [Decimal]::maxvalue + <<<<  1
Line 348: 
Line 349: 
Line 350:     ARITHMETIC OPERATORS AND VARIABLES
Line 351:     You can also use arithmetic operators with variables. The operators act on 
Line 352:     the values of the variables. The following examples demonstrate the use of 
Line 353:     arithmetic operators with variables:
Line 354: 
Line 355:         C:\PS> $intA = 6 
Line 356:         C:\PS> $intB = 4 
Line 357:         C:\PS> $intA + $intB 
Line 358: 
Line 359:         10 
Line 360: 
Line 361: 
Line 362:         C:\PS> $a = "Windows " 
Line 363:         C:\PS> $b = "PowerShell " 
Line 364:         C:\PS> $c = 2 
Line 365: 	C:\PS> $a + $b + $c
Line 366: 
Line 367:         Windows PowerShell 2 
Line 368: 
Line 369: 
Line 370:     ARITHMETIC OPERATORS AND COMMANDS
Line 371:     Typically, you use the arithmetic operators in expressions with numbers, 
Line 372:     strings, and arrays. However, you can also use arithmetic operators with 
Line 373:     the objects that commands return and with the properties of those objects.
Line 374: 
Line 375:     The following examples show how to use the arithmetic operators in 
Line 376:     expressions with Windows PowerShell commands:
Line 377: 
Line 378: 
Line 379: 	C:\PS> get-date
Line 380: 	Wednesday, January 02, 2008 1:28:42 PM
Line 381: 
Line 382: 
Line 383: 	C:\PS> $day = new-timespan -day 1
Line 384: 	C:\PS> get-date + $day
Line 385: 	Thursday, January 03, 2008 1:34:52 PM
Line 386: 
Line 387: 
Line 388: 	C:\PS> get-process | where {($_.ws * 2) -gt 50mb}
Line 389: 	Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
Line 390: 	-------  ------    -----      ----- -----   ------     -- -----------
Line 391: 	   1896      39    50968      30620   264 1,572.55   1104 explorer
Line 392: 	  12802      78   188468      81032   753 3,676.39   5676 OUTLOOK
Line 393: 	    660       9    36168      26956   143    12.20    988 powershell
Line 394: 	    561      14     6592      28144   110 1,010.09    496 services
Line 395: 	   3476      80    34664      26092   234 ...45.69    876 svchost
Line 396: 	    967      30    58804      59496   416   930.97   2508 WINWORD
Line 397:  
Line 398: 
Line 399: EXAMPLES
Line 400:     The following examples show how to use the arithmetic operators in 
Line 401:     Windows PowerShell:
Line 402: 
Line 403: 	C:\PS> 1 + 1
Line 404: 	2 
Line 405: 
Line 406: 	C:\PS> 1 - 1 
Line 407: 	0 
Line 408: 
Line 409: 	C:\PS> -(6 + 3) 
Line 410: 	-9 
Line 411: 
Line 412: 	C:\PS> 6 * 2 
Line 413: 	12 
Line 414: 
Line 415: 	C:\PS> 7 / 2 
Line 416: 	3.5 
Line 417: 
Line 418: 	C:\PS> 7 % 2 
Line 419: 	1 
Line 420: 
Line 421: 	C:\PS> w * 3 
Line 422: 	www 
Line 423: 
Line 424: 	C:\PS> 3 * "w" 
Line 425: 	Cannot convert value "w" to type "System.Int32". Error: "Input string was not
Line 426:         in a correct format." 
Line 427: 	At line:1 char:4 
Line 428: 	+ 3 * <<<< "w" 
Line 429: 
Line 430: 	PS C:\ps-test> "Windows" + " " + "PowerShell" 
Line 431: 	Windows PowerShell 
Line 432: 
Line 433: 	PS C:\ps-test> $a = "Windows" + " " + "PowerShell" 
Line 434: 	PS C:\ps-test> $a 
Line 435: 	Windows PowerShell 
Line 436: 
Line 437: 	C:\PS> $a[0] 
Line 438: 	W 
Line 439: 
Line 440: 	C:\PS> $a = "TestFiles.txt" 
Line 441: 	C:\PS> $b = "C:\Logs\" 
Line 442: 	C:\PS> $b + $a 
Line 443: 	C:\Logs\TestFiles.txt 
Line 444: 
Line 445: 	C:\PS> $a = 1,2,3 
Line 446: 	C:\PS> $a + 4 
Line 447: 	1 
Line 448: 	2 
Line 449: 	3 
Line 450: 	4 
Line 451: 
Line 452: 	C:\PS> $servers = @{0 = "LocalHost"; 1 = "Server01"; 2 = "Server02"} 
Line 453: 	C:\PS> $servers + @{3 = "Server03"} 
Line 454: 	Name Value 
Line 455: 	---- ----- 
Line 456: 	3 Server03 
Line 457: 	2 Server02 
Line 458: 	1 Server01 
Line 459: 	0 LocalHost 
Line 460: 
Line 461: 	C:\PS> $servers 
Line 462: 	Name Value 
Line 463: 	---- ----- 
Line 464: 	2 Server02 
Line 465: 	1 Server01 
Line 466: 	0 LocalHost 
Line 467: 
Line 468: 	C:\PS> $servers += @{3 = "Server03"} #Use assignment operator 
Line 469: 	C:\PS> $servers 
Line 470: 	Name Value 
Line 471: 	---- ----- 
Line 472: 	3 Server03 
Line 473: 	2 Server02 
Line 474: 	1 Server01 
Line 475: 	0 LocalHost 
Line 476: 
Line 477: 
Line 478: SEE ALSO
Line 479:     about_arrays
Line 480:     about_assignment_operators
Line 481:     about_comparison_operators
Line 482:     about_hash_tables
Line 483:     about_operators
Line 484:     about_variables
Line 485:     Get-Date
Line 486:     New-TimeSpan
