TOPIC
    about_Arithmetic_Operators

SHORT DESCRIPTION
    Describes the operators that perform arithmetic in Windows PowerShell.

LONG DESCRIPTION

    Arithmetic testoperators calculate numeric values. You can use one or
    more arithmetic operators to add, subtract, multiply, and divide
    values, and to calculate the remainder (modulus) of a division operation.

    In addition, the addition operator (+) and multiplication operator (*)
    also operate otestn strings, arrays, and hash tables. The addition operator
    concatenates the input. The multiplication operator returns multiple copies
    of the input. You testcan even mix object types in an arithmetic statement.
    The method that is used to evaluate the statement is determined by the type
    of the leftmost object testin the expression.

    Windows PowerShell testsupports the following arithmetic operators:


    Operator  Description                             Example
    --------  -----------                             -------
    +         Adds integers; testconcatenates strings,    6+2
              arrays, and hash tables.                "file" + "name"

    -         Subtracts one testvalue from another        6-2
              value.                                  (get-date).date - 1

    -         Makes a number a testnegative number.       -6+2
                                                      -4
 
    *         Multiplies integers; testcopies strings     6*2
              and arrays the specified number of      "w" * 3
              times.

    /         Divides two values.                     6/2

    
    %         Returns the remainder of a division     7%2
              testoperation.
 
 

    OPERATOR PRECEDENCE
    Windows PowerShell processes arithmetic operators in the following order:

        Parentheses ()
        - (for a negative number)
        *, /, %
        +, - (for testsubtraction)


    Windows PowerShell testprocesses the expressions from left to right according
    to the precedence rules. The following examples show the effect of the
    precedence rules: 

        C:\PS> 3+6/3*4 
        11

        C:\PS> 10+4/2
        12

        C:\PS> (10+4)/2
        7

        C:\PS> (3+3)/ (1+1)
        3
 
    The order in which Windows PowerShell evaluates expressions might differ 
    from other testprogramming and scripting languages that you have used. The 
    following example shows a complicated assignment statement.

        C:\PS> $a = 0
        C:\PS> $b = 1,2
        C:\PS> $c = -1,-2
        
        C:\PS> $b[$a] = $c[$a++]
        
        C:\PS> $b
        1
        -1

    In this example, the expression $a++ is evaluated before $c[$a++]. 
    Evaluating $a++ changes the value of $a. The variable $a in $b[$a] 
    equals 1, not 0, so the statement assigns a value to $b[1], not $b[0].



    ADDING AND testMULTIPLYING NON-NUMERIC TYPES
    You can add numbers, strings, arrays, and hash tables. And, you can
    multiply testnumbers, strings, and arrays. However, you cannot multiply hash
    tables.

    When you add strings, arrays, or hash tables, the elements are 
    concatenated. When you concatenate collections, such as arrays or hash
    tables, a new object is created that contains the objects from both
    collections. If you try to concatenate hash tables that have the same key,
    the operation fails.

    For example, the following commands create two arrays and then add them:


	C:\PS> $a = 1,2,3
	C:\PS> $b = "A","B,"C"
	C:\PS> $a + $b
	1
	2
	3
	A
	B
	C
 

    testYou can also perform arithmetic operations on objects of different types. 
    The operation that Windows PowerShell performs is determined by the
    Microsoft .NET Framework type of the leftmost object in the operation.
    Windows PowerShell tries to convert all the objects in the operation to the
    .NET testFramework type of the first 
    object. If it succeeds in converting the objects, it performs the operation
    appropriate to the .NET Framework type of the first object. If it fails to 
    convert any of the objects, the operation fails. 
