
aTOPIC    

about_Arithmetic_OperatorsSHORT 
            .

LONG 

        .     
        , , ,  
divide    ,      (modulus)    .

     ,    (+)    (*)
       , ,   .   
      .      
copies      .          .
                 
          .

      supports    :


                                   
    --------  -----------                             -------
    +          ;  ,    6+
              ,   .                "file" + "name"

    -                     6-
              .                                  (get-). - 

    -              .       -6+
                                                      -
4 
    *          ; copies      6*
                         "w" * 
3              .

    /           .                     6/

    
    %                   7%
              .
 
 

     
            :

         ()
        - (   )
        *, /, %
        +, - ( subtraction)


             
according       .        
     : 

        :\PS> 3+6/3*4 
        

11        :\PS> 10+4/
        

12        :\PS> (10+4)/
        

7        :\PS> (3+3)/ (+)
        
3 
              
      programming       .  
          .

        :\PS> $ = 
        :\PS> $b = ,
        :\PS> $ = -,-
        
        :\PS> $b[$] = $[$++]
        
        :\PS> $
b        
        -

      ,   $++    $[$++]. 
     $++     $.   $  $b[$] 
     ,  ,        $b[],  $b[].



      MULTIPLYING NON- 
       , , ,   . ,  
     , ,  . ,    
    .

       , ,   ,    
    .    ,     
    ,           
both    .            ,
      .

     ,          :


	:\PS> $ = ,,
3	:\PS> $b = "","B,""
	:\PS> $ + $
b	
	
	
3	
	
B	
 

              . 
             
     .         .
                
    .      
    .       ,    
       .      .     
        ,   . 

       demonstrates       
         include   :


        :\PS> "file" + 
16        

file16        :\PS> $array = ,,
3        :\PS> $array + 
16        
        
        
3        

16	:\PS> $array + "file"
        
        
        
3        

file        :\PS> "file" * 
3        
filefilefile 
    Because        statements    
     ,        
    strictly commutative.  , ( + b) does  always equal (b + ), 
     ( * b) does  always equal (b * ).

       demonstrate  principle:

        :\PS> "file" + 
        

file2        :\PS>  + "file"
           "file"   "System.Int32". Error: "
        string was    correct format."
        At line: char:
4        +  + <<<<  "file"

        :\PS> "file" * 
3        

filefilefile        :\PS> 3 * "file"
           "file"   "System.Int32". Error: " 
        string was    correct format."
        At line: char:
4        + 3 * <<<<  "file"
 

        slightly  case.     . ,
         table   array. ,      
        table. 

        how      each    
     :


        :\PS> $hash1 = @{=; b=; =3}
        :\PS> $hash2 = @{c1="Server01"; c2="Server02"}
        :\PS> $hash1 + $

hash2        Name                           
        ----                           -----
        c2                             
Server02                                      
        b                              
        c1                             
Server01                                      


3        :\PS> $hash1 + 
             table only    table.
        At line: char:
9        + $hash1 + <<<<  


        :\PS>  + $
hash1          "System..Hashtable"  "System.Int32".
        At line: char:
4        +  + <<<<  $
hash1 

       demonstrate       table   
    array.  entire  table  added   array   single .


        :\PS> $array = ,,
3        :\PS> $array + $
hash1        
        
        

3        Name                           
        ----                           -----
                                      
        b                              
                                      


3        :\PS> $sum = $array + $
hash1        :\PS> $sum.
count        

4        :\PS> $sum[3]
        Name                           
        ----                           -----
                                      
        b                              
                                      


3        PS :\ps-test> $sum + $
hash2        
        
        

3        Name                           
        ----                           -----
                                      
        b                              
                                      
3        c2                             
Server02 

               contain 
      :

        :\PS> $hash1 = @{=; b=; =3}
        :\PS> $hash2 = @{="red"}
        :\PS> $hash1 + $
hash2        Bad argument   '+': Item has already been added. 
          dictionary: ''     being added: ''.
        At line: char:
9        + $hash1 + <<<<  $
hash2 


    Although     very useful,    
            .   
information    see about_assignment_operators.      += 
        items   array:

        :\PS>  $
array        
        
        

3        :\PS>  $array + "file"
        
        
        
3        

file        :\PS>  $
array        
        
        

3        :\PS>  $array += "file"
        :\PS>  $
array        
        
        
3        

file        :\PS> $

hash1        Name                           
        ----                           -----
                                      
        b                              
                                      

3        :\PS> $hash1 += @{e = 5}
        :\PS> $

hash1        Name                           
        ----                           -----
                                      
        b                              
        e                              
5                                      
3 

      automatically selects  .   
     best expresses  result without losing  precision.  :

        :\PS>  + 3.
        5.
        :\PS> (). GetType().
FullName        System.
Int32        :\PS> ( + 3.).GetType().
FullName        System.

Double      result     too large   ,     
    result  widened  accommodate  result,     : 

        :\PS> (512MB).GetType().
FullName        System.
Int32        :\PS> (512MB * 512MB).GetType().
FullName        System.

Double        result will  necessarily be       
    operands.    ,     be cast  
    unsigned integer,   unsigned integer  too large  be cast 
    Int32:

        :\PS> ([int32]::minvalue + [uint32]::maxvalue).gettype().
fullname        System.

Int64      , Int64  accommodate both .

     System.Decimal    exception.  either operand has  
Decimal    ,  result will be   Decimal .   result  too 
large      Decimal ,  will  be cast  Double. Instead,  
error    results.
    
        :\PS> [Decimal]::
maxvalue        
79228162514264337593543950335        :\PS> [Decimal]::maxvalue + 
         was either too large  too small   Decimal.
        At line: char:
22        + [Decimal]::maxvalue + <<<<  


       
VARIABLES          with variables.   act  
        variables.    demonstrate    
      with variables:

        :\PS> $intA = 6 
        :\PS> $intB = 4 
        :\PS> $intA + $intB 

        10 


        :\PS> $ = " " 
        :\PS> $b = " " 
        :\PS> $ =  
	:\PS> $ + $b + $

           


       
    Typically,        with , 
    ,  . ,       with 
        return  with  properties  those .

        how       
     with   :


	:\PS> get-
	Wednesday, January 02, 2008 :28:42 


PM	:\PS> $day = -timespan -day 
	:\PS> get- + $
day	Thursday, January 03, 2008 :34:52 


PM	:\PS> get-process | where {($_.ws * ) -gt 50mb}
	Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id 
ProcessName	-------  ------    -----      ----- -----   ------     -- -----------
	   1896      39    50968      30620   264 ,572.55   1104 
explorer	  12802      78   188468      81032   753 3,676.39   5676 
OUTLOOK	    660       9    36168      26956   143    12.20    988 
	    561      14     6592      28144   110 ,010.09    496 
services	   3476      80    34664      26092   234 ...45.69    876 
svchost	    967      30    58804      59496   416   930.97   2508 
WINWORD 


        how       
     :

	:\PS>  + 
	 

	:\PS>  -  
	 

	:\PS> -(6 + 3) 
	-9 

	:\PS> 6 *  
	12 

	:\PS> 7 /  
	3.5 

	:\PS> 7 %  
	 

	:\PS> w * 3 
	www 

	:\PS> 3 * "w" 
	   "w"   "System.Int32". Error: " string was 
          correct format." 
	At line: char:4 
	+ 3 * <<<< "w" 

	PS :\ps-test> "" + " " + "" 
	  

	PS :\ps-test> $ = "" + " " + "" 
	PS :\ps-test> $ 
	  

	:\PS> $[] 
	W 

	:\PS> $ = "TestFiles.txt" 
	:\PS> $b = ":\Logs\" 
	:\PS> $b + $ 
	:\Logs\TestFiles.txt 

	:\PS> $ = ,,3 
	:\PS> $ + 4 
	 
	 
	3 
	4 

	:\PS> $servers = @{ = "LocalHost";  = "Server01";  = "Server02"} 
	:\PS> $servers + @{3 = "Server03"} 
	Name  
	---- ----- 
	3 Server03 
	 Server02 
	 Server01 
	 LocalHost 

	:\PS> $servers 
	Name  
	---- ----- 
	 Server02 
	 Server01 
	 LocalHost 

	:\PS> $servers += @{3 = "Server03"} #   
	:\PS> $servers 
	Name  
	---- ----- 
	3 Server03 
	 Server02 
	 Server01 
	 LocalHost 


SEE 
    
about_arrays    
about_assignment_operators    
about_comparison_operators    
about_hash_tables    
about_operators    
about_variables    Get-
    -

